Import('src_env')

src_cpp_env = src_env.Clone()
src_cpp_env['objroot'] += '/cpp'
src_cpp_env['srcroot'] += '/cpp'
src_cpp_env['extension'] = 'cpp'

def CheckDependencies():
  global src_cpp_env
  conf = Configure(src_cpp_env)
  if not conf.CheckLib('event'):
    print 'Did not find libevent existing'
    Exit(1)
  if not conf.CheckLib('protobuf'):
    print 'Did not find protobuf existing'
    Exit(1)
  src_cpp_env = conf.Finish()
CheckDependencies()

platform = ' '
def CheckPlatform():
  global src_cpp_env
  global platform
  conf = Configure(src_cpp_env)
  if src_cpp_env['CC'] == 'gcc':
    platform += '-DUSE_GCC '

  if conf.CheckCHeader('pthread.h'):
    platform += '-DUSE_PTHREAD '
  src_cpp_env = conf.Finish()
CheckPlatform()

if (src_cpp_env['DEBUG'] == True):
  src_cpp_env.Append(CCFLAGS=' -g ' + platform)
else:
  src_cpp_env.Append(CCFLAGS=' -g -O ' + platform)

src_cpp_env.Append(CPPPATH=[src_cpp_env['srcroot']])
Export('src_cpp_env')

subdirs=[
 'base',
 'concurrency',
 'net',
 'smart_ptr',
 'util',
 'log',
]

src_files = []
for x in subdirs:
  target_dir='%s/%s/' % (src_cpp_env['objroot'], x)
  src_files += Glob(target_dir + '*.' + src_cpp_env['extension'])

src_cpp_env.StaticLibrary('eventrpc', src_files)
#src_cpp_env.SharedLibrary('eventrpc', src_files)
