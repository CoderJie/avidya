Import('src_env')

cpp_src_env = src_env.Clone()
cpp_src_env['objroot'] += '/cpp'
cpp_src_env['extension'] = 'cpp'
cpp_src_env.Append(CPPPATH=[cpp_src_env['objroot']])
Export('cpp_src_env')

def CheckDependencies():
  global cpp_src_env
  conf = Configure(cpp_src_env)
  if not conf.CheckLib('event'):
    print 'Did not find libevent existing'
    Exit(1)
  if not conf.CheckLib('protobuf'):
    print 'Did not find protobuf existing'
    Exit(1)
  env = conf.Finish()

CheckDependencies()

subdirs=[
 'base',
 'concurrency',
 'net',
 'smart_ptr',
 'util',
]

for x in subdirs:
  target_dir='%s/%s' % (cpp_src_env['objroot'], x)
  SConscript('%s/%s/SConscript' % (cpp_src_env['srcroot'], x), build_dir=target_dir, duplicate=0)

obj_files = []
for x in subdirs:
  target_dir='%s/%s/' % (cpp_src_env['objroot'], x)
  obj_files += Glob(target_dir + '*.o')

StaticLibrary('eventrpc', obj_files)
